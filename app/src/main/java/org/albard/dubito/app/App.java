/*
 * This source file was generated by the Gradle 'init' task
 */
package org.albard.dubito.app;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.time.Duration;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.function.Consumer;
import java.util.function.Supplier;

import org.albard.dubito.app.connection.UserConnection;
import org.albard.dubito.app.connection.UserConnectionReceiver;
import org.albard.dubito.app.messaging.MessageSerializer;
import org.albard.dubito.app.messaging.MessageReceiver;
import org.albard.dubito.app.messaging.MessageSender;

public class App {
    public static void main(final String[] args) {
        final String bindAddress = getArgOrDefault(args, 0, () -> "0.0.0.0");
        final int bindPort = Integer.parseInt(getArgOrDefault(args, 1, () -> "9000"));
        final MessageSerializer messageSerializer = createMessageSerializer();
        final ObservableMap<InetSocketAddress, UserConnection> connectionRepository = ObservableMap.createEmpty();
        connectionRepository.addListener(createUserRepositoryListener(messageSerializer));
        try (final UserConnectionReceiver connectionReceiver = UserConnectionReceiver.createBound(bindAddress,
                bindPort)) {
            connectionReceiver.setUserConnectedListener(c -> connectionRepository
                    .putIfAbsent((InetSocketAddress) c.getSocket().getRemoteSocketAddress(), c));
            connectionReceiver.start();
            System.out.println("[SERVER] Listening on " + bindAddress + ":" + bindPort);
            runClient(args, 2, connectionRepository);
        } catch (final IOException ex) {
            ex.printStackTrace();
        }
        System.out.println("[SERVER] Closed");
    }

    private static void runClient(final String[] args, final int argsOffset,
            final ObservableMap<InetSocketAddress, UserConnection> connectionRepository) {
        final Scanner inputScanner = new Scanner(System.in);
        final String remoteAddress = getArgOrDefault(args, argsOffset,
                () -> requestInput(inputScanner, "[CLIENT] Insert remote peer hostname: "));
        final int remotePort = parseIntOrDefault(
                getArgOrDefault(args, argsOffset + 1,
                        () -> requestInput(inputScanner, "[CLIENT] Insert remote peer port (or empty for default): ")),
                () -> 9000);
        try (final UserConnection connection = UserConnection.createAndConnect(remoteAddress, remotePort)) {
            connectionRepository.putIfAbsent(new InetSocketAddress(remoteAddress, remotePort), connection);
            final MessageSerializer messageSerializer = createMessageSerializer();
            final Socket clientSocket = connection.getSocket();
            final MessageSender messageSender = MessageSender.createFromStream(clientSocket.getOutputStream(),
                    messageSerializer::serialize);
            final MessageReceiver messageReceiver = MessageReceiver.createFromStream(clientSocket.getInputStream(),
                    messageSerializer::deserialize);
            messageReceiver.setMessageListener(
                    createIncomingMessageHandler("CLIENT", (InetSocketAddress) clientSocket.getRemoteSocketAddress()));
            messageReceiver.start();
            System.out.println("[CLIENT] Connected!");
            do {
                Thread.sleep(Duration.ofSeconds(1));
                System.out.print("[CLIENT] Input any message and press ENTER to send (or /q to quit): ");
                final String input = inputScanner.nextLine();
                if (input.equals("/q")) {
                    break;
                }
                messageSender.send(input);
            } while (true);
        } catch (final Exception ex) {
            ex.printStackTrace();
        }
        System.out.println("[CLIENT] Closed");
    }

    private static ObservableMapListener<InetSocketAddress, UserConnection> createUserRepositoryListener(
            final MessageSerializer messageSerializer) {
        return new ObservableMapListener<>() {
            final Map<InetSocketAddress, MessageReceiver> receivers = Collections.synchronizedMap(new HashMap<>());

            @Override
            public void entryAdded(InetSocketAddress endPoint, UserConnection connection) {
                final MessageReceiver receiver;
                try {
                    receiver = MessageReceiver.createFromStream(connection.getSocket().getInputStream(),
                            messageSerializer::deserialize);
                    receiver.setMessageListener(createIncomingMessageHandler("SERVER", endPoint));
                    receiver.start();
                    this.receivers.putIfAbsent(endPoint, receiver);
                    System.out.println("[SERVER] Opened connection from " + endPoint);
                } catch (final IOException ex) {
                    ex.printStackTrace();
                }
            }

            @Override
            public void entryRemoved(InetSocketAddress endPoint, UserConnection connection) {
                try {
                    System.out.println("[SERVER] Closed connection from " + endPoint);
                    this.receivers.remove(endPoint);
                    connection.close();
                } catch (final IOException ex) {
                    ex.printStackTrace();
                }
            }
        };
    }

    private static Consumer<Object> createIncomingMessageHandler(String label, InetSocketAddress endPoint) {
        return m -> {
            System.out.println("[" + label + "] " + endPoint + ": " + m);
        };
    }

    private static MessageSerializer createMessageSerializer() {
        return new MessageSerializer() {
            @Override
            public byte[] serialize(Object message) {
                return message.toString().getBytes();
            }

            @Override
            public Object deserialize(byte[] rawMessage) {
                return new String(rawMessage);
            }
        };
    }

    private static int parseIntOrDefault(final String value, Supplier<Integer> defaultValueProvider) {
        try {
            return Integer.parseInt(value);
        } catch (final Exception ex) {
            return defaultValueProvider.get();
        }
    }

    private static String requestInput(final Scanner scanner, final String prompt) {
        System.out.println(prompt);
        return scanner.nextLine();
    }

    private static String getArgOrDefault(String[] args, int index, Supplier<String> defaultValueProvider) {
        if (args.length <= index) {
            return defaultValueProvider.get();
        }
        return args[index];
    }
}
